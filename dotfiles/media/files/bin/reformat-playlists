#!/bin/bash
# Copyright (c) 2020-2024, Jef Oliver
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
# IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# SPDX-License-Identifier: 0BSD
#
# Authors:
# Jef Oliver <jef@eljef.me>

. "/usr/lib/eljef_bash/eljef-bash-common.sh" || exit 1

HELPSTATEMENT=$(cat <<-EOF

    reformat-playlists

    Reformats a M3U Playlist from Windows to POSIX paths.

    Required Environment Variables:
        MUSIC_PLAYLIST_DIR: Path to the base directory holding the windows
                            folder.

    Optional Config File:
    ~/.config/playlist/paths.sed
        sed script containing commands for replacing paths in an M3U

EOF
)

check_help "${1}"
check_env MUSIC_PLAYLIST_DIR

check_installed "basename" "dirname" "find" "rm" "sed" "tr"

cd_or_error "${MUSIC_PLAYLIST_DIR}"
check_dir "windows"

make_directory "posix"

cd_or_error "windows"

print_info "Reformatting M3U Playlists"
for i in *.m3u
do
    posix_file="${MUSIC_PLAYLIST_DIR}/posix/${i}"
    print_move "${i}" "${posix_file}"

    rm -f "${posix_file}" || failure "failed to remove file: ${posix_file}"

    print_info "\tReformatting..."
    tr -d '\015' < "${i}" > "${posix_file}.tmp"
    sed -e '1s/^\xEF\xBB\xBF//' \
        -e 's|\\|/|g' \
        -i "${posix_file}.tmp" || failure "could not reformat: ${posix_file}.tmp"

    if [[ -f "${HOME}/.config/playlist/paths.sed" ]]; then
        sed -f "${HOME}/.config/playlist/paths.sed" -i "${posix_file}.tmp" || failure "could not replace paths: ${posix_file}.tmp"
    fi

    print_info "\tValidating..."
    while read -r line
    do
        clean_path="${line//[$'\t\r\n']}"
        clean_dir="$(dirname "${clean_path}")"
        clean_file="$(basename "${clean_path}" | sed -e 's|\[|\\\[|g' -e 's|\]|\\\]|g')"

        if [[ ! -d "${clean_dir}" ]]; then
            print_warn "File Not Found: ${clean_path}"
            continue
        fi

        correct_file="$(find "${clean_dir}" -iname "${clean_file}")" || failure "error finding file: ${clean_path}"

        if [[ -z "${correct_file}" ]]; then
            print_warn "File Not Found: ${clean_path}"
            continue
        fi

        echo "${correct_file}" >> "${posix_file}" || failure "could not add file to playlist: ${correct_file}"

    done < "${posix_file}.tmp"

    rm "${posix_file}.tmp" || failure "failed removing temp file ${posix_file}.tmp"

done

